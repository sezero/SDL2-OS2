--- mpg123-1.22.4/src/libmpg123/format.c
+++ mpg123-1.22.4-edit/src/libmpg123/format.c
@@ -557,11 +557,12 @@
 /* We always assume that whole numbers are written!
    partials will be cut out. */
 
-static const char *bufsizeerr = "Fatal: Buffer too small for postprocessing!";
-
-
 #ifndef NO_16BIT
 
+#if !defined(NO_ERRORMSG) && !(defined(NO_REAL) && defined(NO_32BIT))
+static const char *bufsizeerr = "Fatal: Buffer too small for postprocessing!";
+#endif
+
 static void conv_s16_to_u16(struct outbuffer *buf)
 {
 	size_t i;
--- mpg123-1.22.4/src/libmpg123/frame.c
+++ mpg123-1.22.4-edit/src/libmpg123/frame.c
@@ -166,11 +166,12 @@
 
 int attribute_align_arg mpg123_reset_eq(mpg123_handle *mh)
 {
-	int i;
 	if(mh == NULL) return MPG123_BAD_HANDLE;
 #ifndef NO_EQUALIZER
+	{ int i;
 	mh->have_eq_settings = 0;
 	for(i=0; i < 32; ++i) mh->equalizer[0][i] = mh->equalizer[1][i] = DOUBLE_TO_REAL(1.0);
+	}
 #endif
 	return MPG123_OK;
 }
--- mpg123-1.22.4/src/libmpg123/readers.c
+++ mpg123-1.22.4-edit/src/libmpg123/readers.c
@@ -30,7 +30,9 @@
 static off_t get_fileinfo(mpg123_handle *);
 static ssize_t posix_read(int fd, void *buf, size_t count){ return read(fd, buf, count); }
 static off_t   posix_lseek(int fd, off_t offset, int whence){ return lseek(fd, offset, whence); }
+#ifndef NO_ICY
 static off_t     nix_lseek(int fd, off_t offset, int whence){ return -1; }
+#endif
 
 static ssize_t plain_fullread(mpg123_handle *fr,unsigned char *buf, ssize_t count);
 
